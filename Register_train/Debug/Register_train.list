
Register_train.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003b0  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000594  0800059c  0001059c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000594  08000594  0001059c  2**0
                  CONTENTS
  4 .ARM          00000000  08000594  08000594  0001059c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000594  0800059c  0001059c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000594  08000594  00010594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000598  08000598  00010598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001059c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  0800059c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  0800059c  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001059c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001f33  00000000  00000000  000105c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000005ce  00000000  00000000  000124f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000c8  00000000  00000000  00012ac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000090  00000000  00000000  00012b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012c8a  00000000  00000000  00012c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000014cc  00000000  00000000  000258aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00064107  00000000  00000000  00026d76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0008ae7d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000001d4  00000000  00000000  0008aed0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000000 	.word	0x20000000
 8000200:	00000000 	.word	0x00000000
 8000204:	0800057c 	.word	0x0800057c

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000004 	.word	0x20000004
 8000220:	0800057c 	.word	0x0800057c

08000224 <main>:
 * System Clock Frequency
 */
#define SysClockFreq	72000000UL

int main(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	RCC_HSEInit();
 8000228:	f000 f882 	bl	8000330 <RCC_HSEInit>
    /* Loop forever */
	RCC_SysTickInit(SysClockFreq);
 800022c:	4801      	ldr	r0, [pc, #4]	; (8000234 <main+0x10>)
 800022e:	f000 f90f 	bl	8000450 <RCC_SysTickInit>
	while(1)
 8000232:	e7fe      	b.n	8000232 <main+0xe>
 8000234:	044aa200 	.word	0x044aa200

08000238 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000238:	b480      	push	{r7}
 800023a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800023c:	4b15      	ldr	r3, [pc, #84]	; (8000294 <SystemInit+0x5c>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	4a14      	ldr	r2, [pc, #80]	; (8000294 <SystemInit+0x5c>)
 8000242:	f043 0301 	orr.w	r3, r3, #1
 8000246:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000248:	4b12      	ldr	r3, [pc, #72]	; (8000294 <SystemInit+0x5c>)
 800024a:	685a      	ldr	r2, [r3, #4]
 800024c:	4911      	ldr	r1, [pc, #68]	; (8000294 <SystemInit+0x5c>)
 800024e:	4b12      	ldr	r3, [pc, #72]	; (8000298 <SystemInit+0x60>)
 8000250:	4013      	ands	r3, r2
 8000252:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000254:	4b0f      	ldr	r3, [pc, #60]	; (8000294 <SystemInit+0x5c>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	4a0e      	ldr	r2, [pc, #56]	; (8000294 <SystemInit+0x5c>)
 800025a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800025e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000262:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000264:	4b0b      	ldr	r3, [pc, #44]	; (8000294 <SystemInit+0x5c>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	4a0a      	ldr	r2, [pc, #40]	; (8000294 <SystemInit+0x5c>)
 800026a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800026e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000270:	4b08      	ldr	r3, [pc, #32]	; (8000294 <SystemInit+0x5c>)
 8000272:	685b      	ldr	r3, [r3, #4]
 8000274:	4a07      	ldr	r2, [pc, #28]	; (8000294 <SystemInit+0x5c>)
 8000276:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800027a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800027c:	4b05      	ldr	r3, [pc, #20]	; (8000294 <SystemInit+0x5c>)
 800027e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000282:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000284:	4b05      	ldr	r3, [pc, #20]	; (800029c <SystemInit+0x64>)
 8000286:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800028a:	609a      	str	r2, [r3, #8]
#endif 
}
 800028c:	bf00      	nop
 800028e:	46bd      	mov	sp, r7
 8000290:	bc80      	pop	{r7}
 8000292:	4770      	bx	lr
 8000294:	40021000 	.word	0x40021000
 8000298:	f8ff0000 	.word	0xf8ff0000
 800029c:	e000ed00 	.word	0xe000ed00

080002a0 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80002a0:	b480      	push	{r7}
 80002a2:	b083      	sub	sp, #12
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	4603      	mov	r3, r0
 80002a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	db0c      	blt.n	80002cc <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002b2:	79fb      	ldrb	r3, [r7, #7]
 80002b4:	f003 021f 	and.w	r2, r3, #31
 80002b8:	4907      	ldr	r1, [pc, #28]	; (80002d8 <__NVIC_ClearPendingIRQ+0x38>)
 80002ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002be:	095b      	lsrs	r3, r3, #5
 80002c0:	2001      	movs	r0, #1
 80002c2:	fa00 f202 	lsl.w	r2, r0, r2
 80002c6:	3360      	adds	r3, #96	; 0x60
 80002c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002cc:	bf00      	nop
 80002ce:	370c      	adds	r7, #12
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bc80      	pop	{r7}
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop
 80002d8:	e000e100 	.word	0xe000e100

080002dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002dc:	b480      	push	{r7}
 80002de:	b083      	sub	sp, #12
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	4603      	mov	r3, r0
 80002e4:	6039      	str	r1, [r7, #0]
 80002e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	db0a      	blt.n	8000306 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002f0:	683b      	ldr	r3, [r7, #0]
 80002f2:	b2da      	uxtb	r2, r3
 80002f4:	490c      	ldr	r1, [pc, #48]	; (8000328 <__NVIC_SetPriority+0x4c>)
 80002f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002fa:	0112      	lsls	r2, r2, #4
 80002fc:	b2d2      	uxtb	r2, r2
 80002fe:	440b      	add	r3, r1
 8000300:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000304:	e00a      	b.n	800031c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000306:	683b      	ldr	r3, [r7, #0]
 8000308:	b2da      	uxtb	r2, r3
 800030a:	4908      	ldr	r1, [pc, #32]	; (800032c <__NVIC_SetPriority+0x50>)
 800030c:	79fb      	ldrb	r3, [r7, #7]
 800030e:	f003 030f 	and.w	r3, r3, #15
 8000312:	3b04      	subs	r3, #4
 8000314:	0112      	lsls	r2, r2, #4
 8000316:	b2d2      	uxtb	r2, r2
 8000318:	440b      	add	r3, r1
 800031a:	761a      	strb	r2, [r3, #24]
}
 800031c:	bf00      	nop
 800031e:	370c      	adds	r7, #12
 8000320:	46bd      	mov	sp, r7
 8000322:	bc80      	pop	{r7}
 8000324:	4770      	bx	lr
 8000326:	bf00      	nop
 8000328:	e000e100 	.word	0xe000e100
 800032c:	e000ed00 	.word	0xe000ed00

08000330 <RCC_HSEInit>:

//millisecond ticks
static __IO uint32_t msTicks;

void RCC_HSEInit(void)
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
	 */

	/*
	 * Configuring PLL
	 */
	RCC->CFGR &= ~RCC_CFGR_PLLMULL;
 8000334:	4b44      	ldr	r3, [pc, #272]	; (8000448 <RCC_HSEInit+0x118>)
 8000336:	685b      	ldr	r3, [r3, #4]
 8000338:	4a43      	ldr	r2, [pc, #268]	; (8000448 <RCC_HSEInit+0x118>)
 800033a:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 800033e:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_PLLMULL9;
 8000340:	4b41      	ldr	r3, [pc, #260]	; (8000448 <RCC_HSEInit+0x118>)
 8000342:	685b      	ldr	r3, [r3, #4]
 8000344:	4a40      	ldr	r2, [pc, #256]	; (8000448 <RCC_HSEInit+0x118>)
 8000346:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 800034a:	6053      	str	r3, [r2, #4]

	/*
	 * Configuring USB Clock
	 */
	RCC->CFGR &= ~RCC_CFGR_USBPRE;
 800034c:	4b3e      	ldr	r3, [pc, #248]	; (8000448 <RCC_HSEInit+0x118>)
 800034e:	685b      	ldr	r3, [r3, #4]
 8000350:	4a3d      	ldr	r2, [pc, #244]	; (8000448 <RCC_HSEInit+0x118>)
 8000352:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000356:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_USBPRE; // (1<<22)
 8000358:	4b3b      	ldr	r3, [pc, #236]	; (8000448 <RCC_HSEInit+0x118>)
 800035a:	685b      	ldr	r3, [r3, #4]
 800035c:	4a3a      	ldr	r2, [pc, #232]	; (8000448 <RCC_HSEInit+0x118>)
 800035e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000362:	6053      	str	r3, [r2, #4]

	/*
	 * HSE Configuration
	 */
	RCC->CR |= RCC_CR_HSEON;
 8000364:	4b38      	ldr	r3, [pc, #224]	; (8000448 <RCC_HSEInit+0x118>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	4a37      	ldr	r2, [pc, #220]	; (8000448 <RCC_HSEInit+0x118>)
 800036a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800036e:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_HSERDY));
 8000370:	bf00      	nop
 8000372:	4b35      	ldr	r3, [pc, #212]	; (8000448 <RCC_HSEInit+0x118>)
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800037a:	2b00      	cmp	r3, #0
 800037c:	d0f9      	beq.n	8000372 <RCC_HSEInit+0x42>
	//Selecting HSE as PLL source
	RCC->CFGR |= RCC_CFGR_PLLSRC;
 800037e:	4b32      	ldr	r3, [pc, #200]	; (8000448 <RCC_HSEInit+0x118>)
 8000380:	685b      	ldr	r3, [r3, #4]
 8000382:	4a31      	ldr	r2, [pc, #196]	; (8000448 <RCC_HSEInit+0x118>)
 8000384:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000388:	6053      	str	r3, [r2, #4]

	/*
	 * Enable PLL
	 */
	RCC->CR |= RCC_CR_PLLON;
 800038a:	4b2f      	ldr	r3, [pc, #188]	; (8000448 <RCC_HSEInit+0x118>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	4a2e      	ldr	r2, [pc, #184]	; (8000448 <RCC_HSEInit+0x118>)
 8000390:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000394:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_PLLRDY));
 8000396:	bf00      	nop
 8000398:	4b2b      	ldr	r3, [pc, #172]	; (8000448 <RCC_HSEInit+0x118>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d0f9      	beq.n	8000398 <RCC_HSEInit+0x68>

	/*
	 * Configuring Flash
	 */
	FLASH->ACR &= ~FLASH_ACR_LATENCY;
 80003a4:	4b29      	ldr	r3, [pc, #164]	; (800044c <RCC_HSEInit+0x11c>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	4a28      	ldr	r2, [pc, #160]	; (800044c <RCC_HSEInit+0x11c>)
 80003aa:	f023 0307 	bic.w	r3, r3, #7
 80003ae:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= FLASH_ACR_LATENCY_1;
 80003b0:	4b26      	ldr	r3, [pc, #152]	; (800044c <RCC_HSEInit+0x11c>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	4a25      	ldr	r2, [pc, #148]	; (800044c <RCC_HSEInit+0x11c>)
 80003b6:	f043 0302 	orr.w	r3, r3, #2
 80003ba:	6013      	str	r3, [r2, #0]
	//Enabling Prefetch buffer
	FLASH->ACR |= FLASH_ACR_PRFTBE;
 80003bc:	4b23      	ldr	r3, [pc, #140]	; (800044c <RCC_HSEInit+0x11c>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	4a22      	ldr	r2, [pc, #136]	; (800044c <RCC_HSEInit+0x11c>)
 80003c2:	f043 0310 	orr.w	r3, r3, #16
 80003c6:	6013      	str	r3, [r2, #0]

	/*
	 * Configuring Sysclk
	 */
	RCC->CFGR &= ~RCC_CFGR_SW;
 80003c8:	4b1f      	ldr	r3, [pc, #124]	; (8000448 <RCC_HSEInit+0x118>)
 80003ca:	685b      	ldr	r3, [r3, #4]
 80003cc:	4a1e      	ldr	r2, [pc, #120]	; (8000448 <RCC_HSEInit+0x118>)
 80003ce:	f023 0303 	bic.w	r3, r3, #3
 80003d2:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_SW_PLL; // Selecting PLL as Sysclk
 80003d4:	4b1c      	ldr	r3, [pc, #112]	; (8000448 <RCC_HSEInit+0x118>)
 80003d6:	685b      	ldr	r3, [r3, #4]
 80003d8:	4a1b      	ldr	r2, [pc, #108]	; (8000448 <RCC_HSEInit+0x118>)
 80003da:	f043 0302 	orr.w	r3, r3, #2
 80003de:	6053      	str	r3, [r2, #4]

	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL));
 80003e0:	bf00      	nop
 80003e2:	4b19      	ldr	r3, [pc, #100]	; (8000448 <RCC_HSEInit+0x118>)
 80003e4:	685b      	ldr	r3, [r3, #4]
 80003e6:	f003 0308 	and.w	r3, r3, #8
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d0f9      	beq.n	80003e2 <RCC_HSEInit+0xb2>


	/*
	 * Configuring AHB, APB Clocks
	 */
	RCC->CFGR &= ~RCC_CFGR_HPRE; //0 mean DIV1 AHB presecaler
 80003ee:	4b16      	ldr	r3, [pc, #88]	; (8000448 <RCC_HSEInit+0x118>)
 80003f0:	685b      	ldr	r3, [r3, #4]
 80003f2:	4a15      	ldr	r2, [pc, #84]	; (8000448 <RCC_HSEInit+0x118>)
 80003f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80003f8:	6053      	str	r3, [r2, #4]

	RCC->CFGR &= ~RCC_CFGR_PPRE1;
 80003fa:	4b13      	ldr	r3, [pc, #76]	; (8000448 <RCC_HSEInit+0x118>)
 80003fc:	685b      	ldr	r3, [r3, #4]
 80003fe:	4a12      	ldr	r2, [pc, #72]	; (8000448 <RCC_HSEInit+0x118>)
 8000400:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000404:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_PPRE1_DIV2; //APB1 or PCLK1 prescaler 36MHz
 8000406:	4b10      	ldr	r3, [pc, #64]	; (8000448 <RCC_HSEInit+0x118>)
 8000408:	685b      	ldr	r3, [r3, #4]
 800040a:	4a0f      	ldr	r2, [pc, #60]	; (8000448 <RCC_HSEInit+0x118>)
 800040c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000410:	6053      	str	r3, [r2, #4]

	RCC->CFGR &= ~RCC_CFGR_PPRE2; //APB2 or PCKL2 prescaler 72MHz
 8000412:	4b0d      	ldr	r3, [pc, #52]	; (8000448 <RCC_HSEInit+0x118>)
 8000414:	685b      	ldr	r3, [r3, #4]
 8000416:	4a0c      	ldr	r2, [pc, #48]	; (8000448 <RCC_HSEInit+0x118>)
 8000418:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800041c:	6053      	str	r3, [r2, #4]

	/*
	 * Configuring ADC Clock
	 */
	RCC->CFGR &= ~RCC_CFGR_ADCPRE;
 800041e:	4b0a      	ldr	r3, [pc, #40]	; (8000448 <RCC_HSEInit+0x118>)
 8000420:	685b      	ldr	r3, [r3, #4]
 8000422:	4a09      	ldr	r2, [pc, #36]	; (8000448 <RCC_HSEInit+0x118>)
 8000424:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000428:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_ADCPRE_DIV2; //ADC Prescaler clock = 36MHz
 800042a:	4b07      	ldr	r3, [pc, #28]	; (8000448 <RCC_HSEInit+0x118>)
 800042c:	4a06      	ldr	r2, [pc, #24]	; (8000448 <RCC_HSEInit+0x118>)
 800042e:	685b      	ldr	r3, [r3, #4]
 8000430:	6053      	str	r3, [r2, #4]
	/*
	 * MCO Source
	 */
	RCC->CFGR |= RCC_CFGR_MCOSEL_SYSCLK;
 8000432:	4b05      	ldr	r3, [pc, #20]	; (8000448 <RCC_HSEInit+0x118>)
 8000434:	685b      	ldr	r3, [r3, #4]
 8000436:	4a04      	ldr	r2, [pc, #16]	; (8000448 <RCC_HSEInit+0x118>)
 8000438:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800043c:	6053      	str	r3, [r2, #4]

}
 800043e:	bf00      	nop
 8000440:	46bd      	mov	sp, r7
 8000442:	bc80      	pop	{r7}
 8000444:	4770      	bx	lr
 8000446:	bf00      	nop
 8000448:	40021000 	.word	0x40021000
 800044c:	40022000 	.word	0x40022000

08000450 <RCC_SysTickInit>:

/*
 * System Timer Setup
 */
void RCC_SysTickInit(uint32_t freq)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b084      	sub	sp, #16
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
	uint32_t reload  = freq/1000;
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	4a15      	ldr	r2, [pc, #84]	; (80004b0 <RCC_SysTickInit+0x60>)
 800045c:	fba2 2303 	umull	r2, r3, r2, r3
 8000460:	099b      	lsrs	r3, r3, #6
 8000462:	60fb      	str	r3, [r7, #12]
	// Reset Control Register
	SysTick->CTRL = 0; //Disables the timer
 8000464:	4b13      	ldr	r3, [pc, #76]	; (80004b4 <RCC_SysTickInit+0x64>)
 8000466:	2200      	movs	r2, #0
 8000468:	601a      	str	r2, [r3, #0]
	//Set the reload value
	SysTick->LOAD = reload-1;
 800046a:	4a12      	ldr	r2, [pc, #72]	; (80004b4 <RCC_SysTickInit+0x64>)
 800046c:	68fb      	ldr	r3, [r7, #12]
 800046e:	3b01      	subs	r3, #1
 8000470:	6053      	str	r3, [r2, #4]
	//Priority set Systick interrupt NVIC
	NVIC_SetPriority(SysTick_IRQn, 0);
 8000472:	2100      	movs	r1, #0
 8000474:	f04f 30ff 	mov.w	r0, #4294967295
 8000478:	f7ff ff30 	bl	80002dc <__NVIC_SetPriority>
	//Reset Systick Val to 0 (not reload value)
	SysTick->VAL = 0;
 800047c:	4b0d      	ldr	r3, [pc, #52]	; (80004b4 <RCC_SysTickInit+0x64>)
 800047e:	2200      	movs	r2, #0
 8000480:	609a      	str	r2, [r3, #8]
	//Set a clock source
	SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk; //Masking it because we want AHB clock
 8000482:	4b0c      	ldr	r3, [pc, #48]	; (80004b4 <RCC_SysTickInit+0x64>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	4a0b      	ldr	r2, [pc, #44]	; (80004b4 <RCC_SysTickInit+0x64>)
 8000488:	f043 0304 	orr.w	r3, r3, #4
 800048c:	6013      	str	r3, [r2, #0]
	//Enable Tick interrupt
	SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;
 800048e:	4b09      	ldr	r3, [pc, #36]	; (80004b4 <RCC_SysTickInit+0x64>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	4a08      	ldr	r2, [pc, #32]	; (80004b4 <RCC_SysTickInit+0x64>)
 8000494:	f043 0302 	orr.w	r3, r3, #2
 8000498:	6013      	str	r3, [r2, #0]
	//Enable Systick
	SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;
 800049a:	4b06      	ldr	r3, [pc, #24]	; (80004b4 <RCC_SysTickInit+0x64>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	4a05      	ldr	r2, [pc, #20]	; (80004b4 <RCC_SysTickInit+0x64>)
 80004a0:	f043 0301 	orr.w	r3, r3, #1
 80004a4:	6013      	str	r3, [r2, #0]
}
 80004a6:	bf00      	nop
 80004a8:	3710      	adds	r7, #16
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	10624dd3 	.word	0x10624dd3
 80004b4:	e000e010 	.word	0xe000e010

080004b8 <RCC_Increment_msTicks>:

/*
 * Increment ms ticks
 */
void RCC_Increment_msTicks(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
	msTicks++;
 80004bc:	4b04      	ldr	r3, [pc, #16]	; (80004d0 <RCC_Increment_msTicks+0x18>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	3301      	adds	r3, #1
 80004c2:	4a03      	ldr	r2, [pc, #12]	; (80004d0 <RCC_Increment_msTicks+0x18>)
 80004c4:	6013      	str	r3, [r2, #0]
}
 80004c6:	bf00      	nop
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bc80      	pop	{r7}
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop
 80004d0:	2000001c 	.word	0x2000001c

080004d4 <SysTick_Handler>:
{
	uint32_t startTicks = RCC_Get_msTicks();
	while(RCC_Get_msTicks() - startTicks < ms);
}

void SysTick_Handler(void) {
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
	NVIC_ClearPendingIRQ(SysTick_IRQn);
 80004d8:	f04f 30ff 	mov.w	r0, #4294967295
 80004dc:	f7ff fee0 	bl	80002a0 <__NVIC_ClearPendingIRQ>
	RCC_Increment_msTicks();
 80004e0:	f7ff ffea 	bl	80004b8 <RCC_Increment_msTicks>
}
 80004e4:	bf00      	nop
 80004e6:	bd80      	pop	{r7, pc}

080004e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80004e8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80004ea:	e003      	b.n	80004f4 <LoopCopyDataInit>

080004ec <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80004ec:	4b0b      	ldr	r3, [pc, #44]	; (800051c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80004ee:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80004f0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80004f2:	3104      	adds	r1, #4

080004f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80004f4:	480a      	ldr	r0, [pc, #40]	; (8000520 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80004f6:	4b0b      	ldr	r3, [pc, #44]	; (8000524 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80004f8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80004fa:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80004fc:	d3f6      	bcc.n	80004ec <CopyDataInit>
  ldr r2, =_sbss
 80004fe:	4a0a      	ldr	r2, [pc, #40]	; (8000528 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000500:	e002      	b.n	8000508 <LoopFillZerobss>

08000502 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000502:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000504:	f842 3b04 	str.w	r3, [r2], #4

08000508 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000508:	4b08      	ldr	r3, [pc, #32]	; (800052c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800050a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800050c:	d3f9      	bcc.n	8000502 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800050e:	f7ff fe93 	bl	8000238 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000512:	f000 f80f 	bl	8000534 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000516:	f7ff fe85 	bl	8000224 <main>
  bx lr
 800051a:	4770      	bx	lr
  ldr r3, =_sidata
 800051c:	0800059c 	.word	0x0800059c
  ldr r0, =_sdata
 8000520:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000524:	20000000 	.word	0x20000000
  ldr r2, =_sbss
 8000528:	20000000 	.word	0x20000000
  ldr r3, = _ebss
 800052c:	20000020 	.word	0x20000020

08000530 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000530:	e7fe      	b.n	8000530 <ADC1_2_IRQHandler>
	...

08000534 <__libc_init_array>:
 8000534:	b570      	push	{r4, r5, r6, lr}
 8000536:	2600      	movs	r6, #0
 8000538:	4d0c      	ldr	r5, [pc, #48]	; (800056c <__libc_init_array+0x38>)
 800053a:	4c0d      	ldr	r4, [pc, #52]	; (8000570 <__libc_init_array+0x3c>)
 800053c:	1b64      	subs	r4, r4, r5
 800053e:	10a4      	asrs	r4, r4, #2
 8000540:	42a6      	cmp	r6, r4
 8000542:	d109      	bne.n	8000558 <__libc_init_array+0x24>
 8000544:	f000 f81a 	bl	800057c <_init>
 8000548:	2600      	movs	r6, #0
 800054a:	4d0a      	ldr	r5, [pc, #40]	; (8000574 <__libc_init_array+0x40>)
 800054c:	4c0a      	ldr	r4, [pc, #40]	; (8000578 <__libc_init_array+0x44>)
 800054e:	1b64      	subs	r4, r4, r5
 8000550:	10a4      	asrs	r4, r4, #2
 8000552:	42a6      	cmp	r6, r4
 8000554:	d105      	bne.n	8000562 <__libc_init_array+0x2e>
 8000556:	bd70      	pop	{r4, r5, r6, pc}
 8000558:	f855 3b04 	ldr.w	r3, [r5], #4
 800055c:	4798      	blx	r3
 800055e:	3601      	adds	r6, #1
 8000560:	e7ee      	b.n	8000540 <__libc_init_array+0xc>
 8000562:	f855 3b04 	ldr.w	r3, [r5], #4
 8000566:	4798      	blx	r3
 8000568:	3601      	adds	r6, #1
 800056a:	e7f2      	b.n	8000552 <__libc_init_array+0x1e>
 800056c:	08000594 	.word	0x08000594
 8000570:	08000594 	.word	0x08000594
 8000574:	08000594 	.word	0x08000594
 8000578:	08000598 	.word	0x08000598

0800057c <_init>:
 800057c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800057e:	bf00      	nop
 8000580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000582:	bc08      	pop	{r3}
 8000584:	469e      	mov	lr, r3
 8000586:	4770      	bx	lr

08000588 <_fini>:
 8000588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800058a:	bf00      	nop
 800058c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800058e:	bc08      	pop	{r3}
 8000590:	469e      	mov	lr, r3
 8000592:	4770      	bx	lr
